services:

  pg_db:
    image: postgres:12.0-alpine
    environment:
      POSTGRES_USER: "${PG_USER:-admin}"
      POSTGRES_PASSWORD: "${PG_PASSWORD:-123}"
      POSTGRES_DB: "${PG_DB:-starburger_db}"
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d starburger_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - frontend

  web:
    build:
      context: .
      dockerfile: Dockerfile-backend
    volumes:
        - /var/www/media:/usr/src/app/media
        - /var/www/static:/usr/src/app/static
    environment:
      SECRET_KEY: "${SECRET_KEY:-secret_key}"
      DEBUG: "false"
      DATABASE_URL: "${POSTGRESQL_DB_URL:-postgres://admin:123@localhost:5432/starburger_db}"
      YANDEX_API_KEY: "${YANDEX_API_KEY:-yandex_api_key}"
    ports:
      - 80:8000
    depends_on:
      pg_db:
        condition: service_healthy
    command: ["sh", "-c", "pip3 install -r requirements.txt && python3 manage.py collectstatic --no-input && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"]
  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile-frontend
    command: >
      bash -c 'npm ci --dev
      && ./node_modules/.bin/parcel build bundles-src/index.js --dist-dir bundles --public-url="./"'
    volumes:
      - /var/www/static:/frontend/bundles/

volumes:
  db_data:
